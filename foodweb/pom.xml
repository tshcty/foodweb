<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!-- $Id: pom.xml 642118 2008-03-28 08:04:16Z reinhard $ -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <packaging>war</packaging>

  <name>foodweb</name>
  <groupId>foodweb</groupId>
  <artifactId>foodweb</artifactId>
  <version>1.0-SNAPSHOT</version>

  <build>
    <finalName>foodweb</finalName>
  </build>

  <properties>      <!--为pom定义一些常量,在pom中的其它地方可以直接引用-->
    <java.version>1.7</java.version>
    <struts2.version>2.3.24.1</struts2.version>
    <spring.version>4.2.4.RELEASE</spring.version>
    <hibernate.orm.version>4.3.11.Final</hibernate.orm.version>
    <mysql.connector.version>5.1.38</mysql.connector.version>
    <commons.dbcp2.version>2.1.1</commons.dbcp2.version>
    <joda-time.version>2.9.1</joda-time.version>
    <usertype.core.version>4.0.0.GA</usertype.core.version>
    <log4j2.version>2.5</log4j2.version>
    <junit.version>4.12</junit.version>
    <servlet.api.version>3.1.0</servlet.api.version>
    <jstl.version>1.2</jstl.version>
    <taglibs.standard.version>1.1.2</taglibs.standard.version>
    <fastjson.version>1.2.7</fastjson.version>
  </properties>

  <dependencies> <!-- 一个项目所依赖的全部Jar文件信息定义描述-->

    <!-- For Struts -->
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-core</artifactId>
      <version>${struts2.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-convention-plugin</artifactId>
      <version>${struts2.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-json-plugin</artifactId>
      <version>${struts2.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-spring-plugin</artifactId>
      <version>${struts2.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-web</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- End for Struts -->

    <!-- For Spring -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-orm</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <!-- End for Spring -->

    <!-- For Hibernate -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>${hibernate.orm.version}</version>
    </dependency>
    <!-- End For Hibernate -->

    <!-- For Database Connection -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>${mysql.connector.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-dbcp2</artifactId>
      <version>${commons.dbcp2.version}</version>
    </dependency>
    <!-- End For Database Connection -->

    <!-- For Joda Time jotat-time就是为了简化日期的操作而创建的一个开源项目，
    正如您期望中的那样，它极大的简化了日期的操作
     DateTime dateTime = new DateTime().monthOfYear()
     .setCopy(11) // November
     .dayOfMonth() // Access Day Of Month Property
     .withMinimumValue() // Get its minimum value
     .plusDays(6) // Add 6 days
     .dayOfWeek() // Access Day Of Week Property
     .setCopy("星期一") // Set to Monday (it will round down)
     .plusDays(1); // Gives us Tuesday

    -->
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>${joda-time.version}</version>
    </dependency>

    <dependency>
      <groupId>org.jadira.usertype</groupId>
      <artifactId>usertype.core</artifactId>
      <version>${usertype.core.version}</version>
    </dependency>
    <!-- End For Joda Time -->

    <!-- For log4j and JUnit 通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、
    文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等;
    我们也可以控制每一条日志的输出格式;通过定义每一条日志信息的级别，我们能够更加细致地控制日
    志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，
    而不需要修改应用的代码。
    unit 测试是程序员测试,即所谓白盒测试,因为程序员知 道被测试的软件如何(How)完成功能和完成什么样(What)的功能。
    -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>${log4j2.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j2.version}</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
    </dependency>
    <!-- For log4j and JUnit -->

    <!-- For JavaEE API -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>${servlet.api.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>${jstl.version}</version>
    </dependency>
    <!-- End For JavaEE API -->

    <!-- For Json
      Fastjson是一个Java语言编写的JSON处理器。
       1、遵循http://json.org标准，为其官方网站收录的参考实现之一。
       2、功能qiang打，支持JDK的各种类型，包括基本的JavaBean、Collection、Map、Date、Enum、泛型。
       3、无依赖，不需要例外额外的jar，能够直接跑在JDK上。
       4、开源，使用Apache License 2.0协议开源。http://code.alibabatech.com/wiki/display/FastJSON/Home

       如果获得Fastjson？
       SVN:http://code.alibabatech.com/svn/fastjson/trunk/
       WIKI:http://code.alibabatech.com/wiki/display/FastJSON/Home
       Issue Tracking:http://code.alibabatech.com/jira/browse/FASTJSON
        Fastjson的最主要的使用入口是com.alibaba.fastjson.JSON

       import com.alibaba.fastjson.JSON;

       public static final Object parse(String text); // 把JSON文本parse为JSONObject或者JSONArray
       public static final JSONObject parseObject(String text)； // 把JSON文本parse成JSONObject
       public static final <T> T parseObject(String text, Class<T> clazz); // 把JSON文本parse为JavaBean
       public static final JSONArray parseArray(String text); // 把JSON文本parse成JSONArray
       public static final <T> List<T> parseArray(String text, Class<T> clazz); //把JSON文本parse成JavaBean集合
       public static final String toJSONString(Object object); // 将JavaBean序列化为JSON文本
       public static final String toJSONString(Object object, boolean prettyFormat); // 将JavaBean序列化为带格式的JSON文本
       public static final Object toJSON(Object javaObject); 将JavaBean转换为JSONObject或者JSONArray。

      -->
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>fastjson</artifactId>
      <version>${fastjson.version}</version>
    </dependency>
    <!-- End For Json -->

  </dependencies>

</project>
